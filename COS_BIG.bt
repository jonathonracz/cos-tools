//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

struct Header
{
    char magic[4];
    LittleEndian();
    uint32 fileSize;
    BigEndian();
    uint32 numFiles;
    uint32 indexTableSize;
};

struct QFSCommand
{
    // Check control code.
    if (ReadUByte() <= 0x7F) // 0x00 - 0x7F
    {
        byte controlCode[2];
        byte data[controlCode[0] & 0x03];
        local int64 decodedDataToCopyCount = ((controlCode[0] & 0x1C) >> 2) + 3;
        local int64 decodedDataToCopyOffset = ((controlCode[0] & 0x60) << 3) + controlCode[1] + 1;
    }
    else if (ReadUByte() <= 0xBF) // 0x80 - 0xBF
    {
        byte controlCode[3];
        byte data[((controlCode[1] & 0xC0) >> 6) & 0x03];
        local int64 decodedDataToCopyCount = (controlCode[0] & 0x3F) + 4;
        local int64 decodedDataToCopyOffset = ((controlCode[1] & 0x3F) << 8) + controlCode[2] + 1;
    }
    else if (ReadUByte() <= 0xDF) // 0xC0 - 0xDF
    {
        byte controlCode[4];
        byte data[controlCode[0] & 0x03];
        local int64 decodedDataToCopyCount = ((controlCode[0] & 0x0C) << 6) + controlCode[3] + 4;
        local int64 decodedDataToCopyOffset = ((controlCode[0] & 0x10) << 12) + (controlCode[1] << 8) + 1;
    }
    else if (ReadUByte() <= 0xFC) // 0xE0 - 0xFC
    {
        byte controlCode;
        byte data[((controlCode & 0x1F) << 2) + 4];
    }
    else // 0xFD - 0xFF
    {
        byte controlCode;
        byte data[controlCode & 0x03];
    }
};

struct QFSFile (uint64 dataSize)
{
    BigEndian();
    char magic[2];
    BitfieldDisablePadding();
    uint uncompressedSize : 24;
    BitfieldEnablePadding();

    local int64 endOffset = FTell() + dataSize - sizeof(magic) + sizeof(uncompressedSize);
    while (FTell() < endOffset)
    {
        QFSCommand command;
    }
};

struct FileEntry
{
    BigEndian();
    uint32 position <format=hex>;
    uint32 size;
    string name;

    local int64 currParsePos = FTell();
    FSeek(position);
    local ushort startBytes = ReadUShort();
    switch (startBytes)
    {
        case 0x10FB:
        {
            QFSFile qfsFile(size);
            break;
        }
        default: byte data[size];
    }
    FSeek(currParsePos);
};

Header header;

local uint32 i;
for (i = 0; i < header.numFiles; ++i)
{
    FileEntry entry;
}
